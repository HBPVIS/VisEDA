
/* Copyright (c) 2014, Human Brain Project
 *                     Daniel Nachbaur <daniel.nachbaur@epfl.ch>
 */

#ifndef ZEQ_VOCABULARY_H
#define ZEQ_VOCABULARY_H

#include <zeq/api.h>
#include <zeq/types.h>

namespace zeq
{

/**
 * An application specific vocabulary of supported events including their
 * serialization. The implementation is dependend on a certain serialization
 * backend, which is flatbuffers by default.
 */
namespace vocabulary
{

/**
 * The supported event types by this vocabulary
 */
enum EventType
{
    EVENT_EXIT,
    EVENT_CAMERA,
    EVENT_SELECTION,
    EVENT_INVALID
};

/**
 * Serialize the given camera matrix into an Event of type camera.
 * The matrix to be serialized and sent to other instances is the one
 * used in the application to transform from world coordinate space into
 * camera space. Microns are assumed as unit and it has the BBP circuit
 * as reference.
 * @param matrix the 4x4 camera matrix in OpenGL data layout
 * @return the serialized event
 */
ZEQ_API Event serializeCamera( const std::vector< float >& matrix );

/**
 * Deserialize the given camera event into the 4x4 matrix.
 * The matrix received and deserialized is the one used in the application
 * to transform from world coordinate space into camera space.
 * Microns are assumed as unit and it has the BBP circuit as reference.
 * @param camera the camera event generated by serializeCamera()
 * @return the 4x4 camera matrix in OpenGL data layout
 */
ZEQ_API std::vector< float > deserializeCamera( const Event& camera );

/**
 * Serialize the given selection into an Event of type selection.
 * @param selection vector of ids (uint)
 * @return the serialized event
 */
ZEQ_API
Event serializeSelection( const std::vector< unsigned int >& selection );

/**
 * Deserialize the given selection event into the vector of ids.
 * @param selection the selection event generated by serializeSelection()
 * @return the vector of ids (uint)
 */
ZEQ_API
std::vector< unsigned int > deserializeSelection( const Event& selection );

}
}

#endif
