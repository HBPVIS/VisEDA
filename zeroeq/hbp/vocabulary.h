
/* Copyright (c) 2014-2015, Human Brain Project
 *                          Daniel Nachbaur <daniel.nachbaur@epfl.ch>
 *                          Juan Hernando <jhernando@fi.upm.es>
 *                          Grigori Chevtchenko <grigori.chevtchenko@epfl.ch>
 */

#ifndef ZEROEQ_HBP_VOCABULARY_H
#define ZEROEQ_HBP_VOCABULARY_H

#include <zeroeq/types.h>
#include <zeroeq/api.h>

#include <zeroeq/hbp/enums.h>

#include <zeroeq/hbp/camera_zeroeq_generated.h>
#include <zeroeq/hbp/cellSetBinaryOp_zeroeq_generated.h>
#include <zeroeq/hbp/frame_zeroeq_generated.h>
#include <zeroeq/hbp/imageJPEG_zeroeq_generated.h>
#include <zeroeq/hbp/lookupTable1D_zeroeq_generated.h>
#include <zeroeq/hbp/selections_zeroeq_generated.h>

namespace zeroeq
{
namespace hbp
{

typedef std::vector< uint32_t > uint32_ts;

namespace data
{

/**
 * Stores two unsigned int vectors and an operation flag.
 *
 * This class stores a couple of unsigned int vectors
 * and an operation flag indicating the operation type of the event.
 *
 */
struct CellSetBinaryOp
{
public:

    CellSetBinaryOp() {}
    CellSetBinaryOp( const uint32_ts& first_, const uint32_ts& second_,
                     CellSetBinaryOpType operation_ )
        : first( first_ )
        , second( second_ )
        , operation( operation_ )
    {}

    uint32_ts first;
    uint32_ts second;
    CellSetBinaryOpType operation;
};

}

/**
 * Serialize the given neuron selection into an Event of type
 * EVENT_SELECTED_IDS.
 * @param selection vector of neuron GIDs (uint).
 * @return the serialized event.
 */
ZEROEQ_API
FBEvent serializeSelectedIDs( const uint32_ts& ids );

/**
 * Deserialize the given neuron selection event into the vector of neuron GIDs.
 * @param event a selection event generated by serializeSelection().
 * @return the vector of neuron GIDs (uint).
 */
ZEROEQ_API
std::vector< unsigned int > deserializeSelectedIDs( const FBEvent& event );

/**
 * Serialize the given selection into an Event of type EVENT_TOGGLE_ID_REQUEST.
 * @param ids vector of neuron GIDs (uint).
 * @return the serialized event.
 */
ZEROEQ_API
FBEvent serializeToggleIDRequest( const uint32_ts& ids );

/**
 * Deserialize an toggle selection request event into the vector of neuron GIDs.
 * @param event an event generated by serializeToggleIDRequest().
 * @return the vector of neuron GIDs (uint).
 */
ZEROEQ_API
std::vector< unsigned int > deserializeToggleIDRequest( const FBEvent& event );

/**
 * Serialize the given CellSetBinaryOp into an Event of type
 * EVENT_CELLSETBINARYOP.
 * @param cellSetBinaryOp the CellSetBinaryOp to be serialized.
 * @return the serialized event.
 */
ZEROEQ_API
FBEvent serializeCellSetBinaryOp( const data::CellSetBinaryOp& cellSetBinaryOp );

/**
 * Convenience overload of the function above
 */
ZEROEQ_API
FBEvent serializeCellSetBinaryOp( const uint32_ts& first, const uint32_ts& second,
                                  CellSetBinaryOpType type );

/**
 * Deserialize the given EVENT_CELLSETBINARYOP event into a CellSetBinaryOp
 * consisting of a couple of std::vector of unsigned int and the operation type.
 * @param event the event product of serializeCellSetBinaryOp.
 * @return the deserialized CellSetBinaryOp.
 */
ZEROEQ_API
data::CellSetBinaryOp deserializeCellSetBinaryOp( const FBEvent& event );

}
}
#endif
